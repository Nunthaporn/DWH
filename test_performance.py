#!/usr/bin/env python3
"""
Test script р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕Вр╕нр╕З fact_sales_quotation job
"""

import time
import pandas as pd
import numpy as np
from jobs.fact_sales_quotation import extract_sales_quotation_data, clean_sales_quotation_data, load_sales_quotation_data

def test_extract_performance():
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕Вр╕нр╕З extract function"""
    print("ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ъ Extract Performance...")
    start_time = time.time()
    
    try:
        df_plan, df_order, df_pay = extract_sales_quotation_data()
        extract_time = time.time() - start_time
        
        print(f"тЬЕ Extract р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Гр╕Щ {extract_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
        print(f"ЁЯУК df_plan: {df_plan.shape}")
        print(f"ЁЯУК df_order: {df_order.shape}")
        print(f"ЁЯУК df_pay: {df_pay.shape}")
        
        return df_plan, df_order, df_pay, extract_time
    except Exception as e:
        print(f"тЭМ Extract р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {e}")
        return None, None, None, None

def test_clean_performance(df_plan, df_order, df_pay):
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕Вр╕нр╕З clean function"""
    print("\nЁЯзк р╕Чр╕Фр╕кр╕нр╕Ъ Clean Performance...")
    start_time = time.time()
    
    try:
        df_clean = clean_sales_quotation_data((df_plan, df_order, df_pay))
        clean_time = time.time() - start_time
        
        print(f"тЬЕ Clean р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Гр╕Щ {clean_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
        print(f"ЁЯУК df_clean: {df_clean.shape}")
        print(f"ЁЯУК Memory usage: {df_clean.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB")
        
        return df_clean, clean_time
    except Exception as e:
        print(f"тЭМ Clean р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {e}")
        return None, None

def test_load_performance(df_clean, test_mode=True):
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕Вр╕нр╕З load function"""
    print("\nЁЯзк р╕Чр╕Фр╕кр╕нр╕Ъ Load Performance...")
    start_time = time.time()
    
    try:
        if test_mode:
            # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕ер╣Зр╕Бр╣Ж
            df_sample = df_clean.head(1000).copy()
            print(f"ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З {len(df_sample)} rows")
        else:
            df_sample = df_clean
        
        load_sales_quotation_data(df_sample)
        load_time = time.time() - start_time
        
        print(f"тЬЕ Load р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Гр╕Щ {load_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
        return load_time
    except Exception as e:
        print(f"тЭМ Load р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: {e}")
        return None

def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ"""
    print("ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю fact_sales_quotation job...")
    
    # р╕Чр╕Фр╕кр╕нр╕Ъ Extract
    df_plan, df_order, df_pay, extract_time = test_extract_performance()
    if df_plan is None:
        return
    
    # р╕Чр╕Фр╕кр╕нр╕Ъ Clean
    df_clean, clean_time = test_clean_performance(df_plan, df_order, df_pay)
    if df_clean is None:
        return
    
    # р╕Чр╕Фр╕кр╕нр╕Ъ Load (р╣Бр╕Ър╕Ъ test mode)
    load_time = test_load_performance(df_clean, test_mode=True)
    if load_time is None:
        return
    
    # р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ
    total_time = extract_time + clean_time + load_time
    print(f"\nЁЯУК р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:")
    print(f"   Extract: {extract_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
    print(f"   Clean: {clean_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
    print(f"   Load: {load_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
    print(f"   р╕гр╕зр╕б: {total_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")
    
    # р╕Ыр╕гр╕░р╕бр╕▓р╕Ур╕Бр╕▓р╕гр╣Ар╕зр╕ер╕▓р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
    if len(df_clean) > 0:
        estimated_full_load_time = (load_time / 1000) * len(df_clean)
        print(f"   р╕Ыр╕гр╕░р╕бр╕▓р╕Ур╕Бр╕▓р╕гр╣Ар╕зр╕ер╕▓р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {estimated_full_load_time:.2f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡ ({estimated_full_load_time/60:.2f} р╕Щр╕▓р╕Чр╕╡)")
    
    print("\nтЬЕ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!")

if __name__ == "__main__":
    main() 